// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hub.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	hub.proto
	tunnel.proto

It has these top-level messages:
	HubConfig
	HubInfo
	Request
	RequestHeader
	RequestBody
	ResponseHeader
	ResponseBody
	ResponseError
	Header
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HubConfig struct {
	Subdomain string `protobuf:"bytes,1,opt,name=subdomain" json:"subdomain,omitempty"`
}

func (m *HubConfig) Reset()                    { *m = HubConfig{} }
func (m *HubConfig) String() string            { return proto.CompactTextString(m) }
func (*HubConfig) ProtoMessage()               {}
func (*HubConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HubConfig) GetSubdomain() string {
	if m != nil {
		return m.Subdomain
	}
	return ""
}

type HubInfo struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
}

func (m *HubInfo) Reset()                    { *m = HubInfo{} }
func (m *HubInfo) String() string            { return proto.CompactTextString(m) }
func (*HubInfo) ProtoMessage()               {}
func (*HubInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HubInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type Request struct {
	SessionID string `protobuf:"bytes,1,opt,name=sessionID" json:"sessionID,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Request) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func init() {
	proto.RegisterType((*HubConfig)(nil), "kuma.hub.HubConfig")
	proto.RegisterType((*HubInfo)(nil), "kuma.hub.HubInfo")
	proto.RegisterType((*Request)(nil), "kuma.hub.Request")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	Prepare(ctx context.Context, in *HubConfig, opts ...grpc.CallOption) (*HubInfo, error)
	Connect(ctx context.Context, in *HubInfo, opts ...grpc.CallOption) (Hub_ConnectClient, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) Prepare(ctx context.Context, in *HubConfig, opts ...grpc.CallOption) (*HubInfo, error) {
	out := new(HubInfo)
	err := grpc.Invoke(ctx, "/kuma.hub.Hub/Prepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Connect(ctx context.Context, in *HubInfo, opts ...grpc.CallOption) (Hub_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hub_serviceDesc.Streams[0], c.cc, "/kuma.hub.Hub/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hub_ConnectClient interface {
	Recv() (*Request, error)
	grpc.ClientStream
}

type hubConnectClient struct {
	grpc.ClientStream
}

func (x *hubConnectClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Hub service

type HubServer interface {
	Prepare(context.Context, *HubConfig) (*HubInfo, error)
	Connect(*HubInfo, Hub_ConnectServer) error
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuma.hub.Hub/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Prepare(ctx, req.(*HubConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HubInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServer).Connect(m, &hubConnectServer{stream})
}

type Hub_ConnectServer interface {
	Send(*Request) error
	grpc.ServerStream
}

type hubConnectServer struct {
	grpc.ServerStream
}

func (x *hubConnectServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kuma.hub.Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Hub_Prepare_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Hub_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hub.proto",
}

func init() { proto.RegisterFile("hub.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x28, 0x4d, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0x2e, 0xcd, 0x4d, 0xd4, 0xcb, 0x28, 0x4d, 0x52,
	0xd2, 0xe4, 0xe2, 0xf4, 0x28, 0x4d, 0x72, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x17, 0x92, 0xe1, 0xe2,
	0x2c, 0x2e, 0x4d, 0x4a, 0xc9, 0xcf, 0x4d, 0xcc, 0xcc, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0x42, 0x08, 0x28, 0xc9, 0x72, 0xb1, 0x7b, 0x94, 0x26, 0x79, 0xe6, 0xa5, 0xe5, 0x0b, 0x09, 0x71,
	0xb1, 0x64, 0xe4, 0x17, 0x97, 0x40, 0xd5, 0x80, 0xd9, 0x4a, 0xea, 0x5c, 0xec, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x60, 0x73, 0x52, 0x8b, 0x8b, 0x33, 0xf3, 0xf3, 0x3c, 0x5d, 0xe0, 0xe6,
	0xc0, 0x04, 0x8c, 0xb2, 0xb9, 0x98, 0x3d, 0x4a, 0x93, 0x84, 0x0c, 0xb9, 0xd8, 0x03, 0x8a, 0x52,
	0x0b, 0x12, 0x8b, 0x52, 0x85, 0x84, 0xf5, 0x60, 0xee, 0xd1, 0x83, 0x3b, 0x46, 0x4a, 0x10, 0x45,
	0x10, 0x6c, 0xad, 0x21, 0x17, 0xbb, 0x73, 0x7e, 0x5e, 0x5e, 0x6a, 0x72, 0x89, 0x10, 0xa6, 0x2c,
	0xb2, 0x06, 0xa8, 0x43, 0x0c, 0x18, 0x9d, 0x58, 0xa3, 0x98, 0x13, 0x0b, 0x32, 0x93, 0xd8, 0xc0,
	0xfe, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x25, 0x23, 0x43, 0x04, 0x01, 0x00, 0x00,
}
